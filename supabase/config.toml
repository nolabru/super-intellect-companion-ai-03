
# A project ID is required when using existing project, removed when using new project
project_id = "vygluorjwehcdigzxbaa"

[api]
# Port to use for the API URL
port = 54321
# Schemas to expose in your API
schemas = ["public", "storage", "graphql_public"]
# Extra schemas to add to the search_path of every request
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[db]
# Port to use for the local database URL
port = 54322
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[studio]
enabled = true
# Port to use for Supabase Studio
port = 54323
# External URL of the API server that frontend connects to
api_url = "http://localhost"

# Email testing server. Emails sent with the local dev setup are not actually sent - the emails are
# monitored and accessible from the dashboard.
[inbucket]
enabled = true
# Port to use for the email testing server web interface
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://localhost:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false

# Configure one of the supported auth providers
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"
# [auth.email.template.confirmation]
# subject = "Confirm Your Signup"
# content_path = "./supabase/templates/confirmation.html"
# [auth.email.template.recovery]
# subject = "Reset Your Password"
# content_path = "./supabase/templates/recovery.html"
# [auth.email.template.magic_link]
# subject = "Your Magic Link"
# content_path = "./supabase/templates/magic_link.html"
# [auth.email.template.email_change]
# subject = "Confirm Email Change"
# content_path = "./supabase/templates/email_change.html"
# [auth.email.template.change_email]
# subject = "Change Email"
# content_path = "./supabase/templates/change_email.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false

# Use pre-defined auth hooks for user management
[auth.hooks]
# Triggered when a user signs up
on_signup = "public.handle_new_user"

# [auth.external.apple]
# enabled = false
# client_id = ""
# secret = ""
# service_account_client_id = ""
# service_account_key_id = ""
# service_account_private_key = ""
# service_account_team_id = ""
#
# [auth.external.azure]
# enabled = false
# client_id = ""
# secret = ""
# url = ""
#
# [auth.external.bitbucket]
# enabled = false
# client_id = ""
# secret = ""
#
# [auth.external.discord]
# enabled = false
# client_id = ""
# secret = ""
#
# [auth.external.facebook]
# enabled = false
# client_id = ""
# secret = ""
# result_fields = ["id", "name", "first_name", "last_name", "email", "gender", "picture", "user_friends"]
#
# [auth.external.github]
# enabled = false
# client_id = ""
# secret = ""
#
# [auth.external.gitlab]
# enabled = false
# client_id = ""
# secret = ""
#
# [auth.external.google]
# enabled = false
# client_id = ""
# secret = ""

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of the supported backends
backend = "postgres"

# Enable PgBouncer support. Must have PgBouncer installed.
[realtime]
enabled = true

# Configure one of the supported backends
[realtime.database]
name = "realtime"
user = "supabase_admin"
password = "postgres"
host = "db"
port = 5432
# Connection string (overrides settings above if set)
connection_string = ""
max_connections = 5
idle_timeout = 300
security_definer_query_pattern = "^realtime\..*$"

# Configure rate limiting
[realtime.rate_limiter]
enabled = false
# What is the time window for rate limiting. Default is 60 seconds.
duration_seconds = 60
# The maximum number of actions to allow per IP address within the rate limit duration.
requests_per_second = 100

# Configure decoding your database based functionality.
[realtime.funk]
schemas = ["public", "realtime"]

# Set triggering actions for your client functionality.
[realtime.funk.filters]
# Example 1: Make all changes to the table visible to subscribers
# my_table = "RESTRICT: SELECT(id, value)"

# Example 2: Make all changes with where clauses
# my_table = "RESTRICT: SELECT(id, value) WHERE id=6"

# Example 3: Realtime INSERT only on id column 6 (returns the selected the columns)
# my_table = "RESTRICT: INSERT(id, value) WHERE id=6"

# Example 4: Realtime DELETE with column id of 6
# my_table = "RESTRICT: DELETE(*) WHERE id=6"

# Example 5: Realtime UPDATE with column id of 6 showing id and value
# my_table = "RESTRICT: UPDATE(id, value) WHERE id=6"

# To allow ALL functionality on the table
# my_table = "*"

# To allow realtime functionality only for a specific user
# my_table = "* WHERE user_id = auth.uid()"

[ai]
enabled = true

# Vector SQL queries will not be logged
[ai.vector]
enable_logging = false

# Set large timeouts (in seconds) for embedding requests.
# Use large values if a request takes > 60s (default).
[ai.timeouts]
connect = 600
read = 600
write = 600

# Configure the Edge Functions.
[functions.ai-chat]
verify_jwt = true
[functions.google-oauth-callback]
verify_jwt = false
[functions.google-token-refresh]
verify_jwt = true
[functions.google-verify-permissions]
verify_jwt = true
[functions.media-storage]
verify_jwt = true
[functions.memory-extractor]
verify_jwt = true
[functions.piapi-audio-create-task]
verify_jwt = true
[functions.piapi-generate-audio]
verify_jwt = true
[functions.piapi-generate-image]
verify_jwt = true
[functions.piapi-generate-video]
verify_jwt = true
[functions.piapi-image-create-task]
verify_jwt = true
[functions.piapi-media-webhook]
verify_jwt = false
[functions.piapi-task-cancel]
verify_jwt = true
[functions.piapi-task-status]
verify_jwt = true
[functions.piapi-video-create-task]
verify_jwt = true
[functions.user-tokens]
verify_jwt = true
